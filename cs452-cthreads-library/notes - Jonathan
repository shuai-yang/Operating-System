We are writing a user thread library without much support from the kernel.
The kernel will see this as one process.

We need to schedule the cpus time slice given to the process to the threads.
Kernel maintains a linked list of several processes.

A process will have a list of threads, round robin chooses the thread to work on.

We have to modify cthreads.c, all the functions we implement will be there.

Part 1:
Write the basic functions, create which makes threads.

cthread_init initializes the library. When the user calls create for the first time, create calls init to 
initialize the library.

cthread_exit(void *retval); 

Exits the current thread.

Child thread calls exit to leave.

cthread_schedule, place all the threads in a queue called ready_queue.
When a thread is made, put the tread in that queue. The Scheduler picks
a thread in the queue to run.

Provided helper functions:
cthread_enqueue() - add to queue.
cthread_dequeue - removes a thread to be ran.
isEmpty()
isFull()
initialized - see if initialize needs to be called.
cthread_t tid_idx - keep track of how many threads there are.
thread_control_block, struct that gives information about the thread.
Max number of threads is 64.
exited starts at zero, when exit it's changed to one, the thread is exiting.
Join - the present thread will not continue until the stated thread in join finished.
waiting - who are you waiting for, initialize to negative one, waiting for nobody. Join sets it to waiting.
Parent - the thread that made this thread.
char_stack[STACK_SIZE] - memory space of this thread.

ucontext_t ctx IMPORTANT - the running context of this thread. 
four supporting functions getcontext, setcontext, makecontext, swapcontext.
getcontext - Initialize the context and save it.
int setcontext - restore context.
makecontext
swapcontext go from one context to the context of the next thread.
examples on canvas.

Context deals with saving and getting the state of the register threads.
setcontext will go to a call to getcontext as if it returned.

makecontext - specify a function and its arguments.
Initialize getcontext()
if make context is called, it will switch the pc pointer to the function passed in when set context is called.
setcontext will never return. When the passed in function returns, the program is finished.

swapcontext save one context and switch to the other context. Swap will call the function in make context.
swap is like a get and set.

When and how to switch?
Roundrobin will have a timer, each threads gets a few milliseconds. When the timer goes out, switch to the next thread.

getcontext() should be used in:
thread_init

timer apis:
settimer makes a timer that goes off every so often.
Every time the timer goes off, call schedule to pick the next thread.

exit, leave the entire process if something goes wrong.

64 tcbs keep track of each. Main thread is 0, next is 1, next is 2

Testing
1-3 tests threads creation, join, exit, and schedule.
4-6 create join

create() { // allocates memory for the thread.
    if (tid_idx >= 64) {
        exit // thread overflow
    }
    if(initialized) {
   if init() != true {
    exit();
   }
    }
    *thread = tid_dx;
// rest of create
    getcontext(); // tcbs[tid_idx].ctx
        tcb[tid_idx].exited = -1;
    tcb[tid_idx]].waiting = -1;
    tcb[tid_idx].parent = 0;
    tid_idx++; // only increment.

    }

init() {
    timer
    signal handler

    getcontext(); // // &tcbs[0].ctx, context of the main threaad. tcb for the next thread, increment by one. Keep track with tid_idx.
    tcb[0].exited = -1;
    tcb[0].waiting = -1;
    tcb[0].parent = -1;
    tid_idx++;
    enqueue();
    makecontext()


    initialized = true;
    return treu;
}

}